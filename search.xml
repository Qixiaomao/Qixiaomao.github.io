<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>慢慢的学会和自己相处</title>
      <link href="/2018/03/31/2018-03-30-life/"/>
      <url>/2018/03/31/2018-03-30-life/</url>
      <content type="html"><![CDATA[<p>我们不肯探索自己本身的价值，我们过分看重他人在自己生命里的参与。于是，孤独不再美好，失去了他人，我们惶惑不安。 –  三毛《简单》</p><a id="more"></a><p>   今天偶尔看到之前在读书笔记上记录三毛的一句话，想想自己从大一到到现在，自己经历过的人和事情；越来越深刻的体会到了“自己”这一独立的存在……</p><p>   以前，想着怎样的一劳永逸的解决事情，总觉得这个世界是存在那些“一步登天”的解决事情的方式的，换言之，只要自己完善自己，就可以凭借着自己的能力达到自己想要的目的；退一万步来说，这事情就算不能一步登天，“总会有一步一步完成事情，从而达到自己想要的效果吧？！”这样的想法；可是，随着自己一点点的在成长，才明白一点，很多事情，在接触到“人情”这玩意之后，很多的事情就不再是之前的“线性思维”去考虑问题了，也就是说，大多数的事情，牵扯到其他人的利益，所以，想解决问题达到相应的效果就不再是一个人能够完成的事情了。从而造就了现在的社会架构。</p><p>​    最近在读《国富论》，再一次认识到人是社群动物，离不开群体，或者说需要群体；小到一根针的制作细致分工，大到一个国家的建设与维持；都离不开人的分工合作，今天，借着三毛的开头，我忽然联想到我身边的朋友、同学，都在或多或少的暴露自己对于情感方面的需求，“失而不得”，似乎总在急于寻找自己的另一半，诚然，从追求的失败到得出这样的结论，会很打击人，会很难受，会很不甘……但是，处在象牙塔里的我们，我依然觉得，这些不过是成长路上需要经历的，我自己也经历过类似的伤痛，但是我最后从中抽离出来，再细细的对自己当下的经历进行一个分析；很赞同之前在公众号上看到的一句话“高中不讲心理，大学不讲政治”（ps:大意）；那么，很多人对于自己个体的认识就不够清晰，从而导致现在大学生本应该对自我进行深度挖掘或者自我探索的一个时光，却浪费在享受物质，外表，情感……带来的各种短暂获取得到的“快乐”当中，当然我这里举例子不是说，我们一定要摒弃这些，只是，结合我自身的学习经历还有接触到的现象，可以套用三毛里的一句话：“人類往往少年老成，青年迷茫，中年喜歡將別人的成就與自己相比較，因而覺得受挫，好不容易活到老年仍是一個沒有成長的笨孩子。我們一直粗糙的活著，而人的一生，便也這樣過去了。”多少能从中看到，那个时候的人们的心理状态，其实也是当下人们的心理状态，急于恋爱，急于求成，急于证明……为的就是满足内心的快感，只是，我们忽略了当下的自己，依然是一个人，一个个体。</p><p>​    于是，就有好多的<code>膨胀</code>的表现，例如：谁绿了谁，xx又分了……这又反应到了社会里好多的现象；人们不再关注自己内心，自己的成长，而是更加关注别人的隐私，忽略了当下；父母太过在意工作而忽略了当下孩子的内心成长那个；学生太在意成绩，而忽略了当下的真正需求；公务员是敲门砖，党员是敲门砖……我们真正想要的又是什么呢？</p><p>​     正如三毛最后在《简单》里说的：“我不求深刻，只求简单。”在现在，我就很享受当下，即使独自一个人的当下，也很享受……因为，这里，没有别人的声音，纯粹的只有自己。</p><p>​      慢慢的学会去独处，慢慢的明白这个世界的常态，慢慢的知道自己最想要的是什么？我想，这些大方向的问题值得我花一辈子去思考，去寻找……</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂感 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>18年静好！</title>
      <link href="/2018/02/14/2018-02-14-%E6%96%B0%E5%B9%B4%E7%A5%9D%E7%A6%8F/"/>
      <url>/2018/02/14/2018-02-14-%E6%96%B0%E5%B9%B4%E7%A5%9D%E7%A6%8F/</url>
      <content type="html"><![CDATA[<p>新年伊始，静待！</p><a id="more"></a><h1 id="新年祝福"><a href="#新年祝福" class="headerlink" title="新年祝福"></a>新年祝福</h1><p>   一晃就到了象牙塔的第三年了，习惯瞎忙之后，就会忽略当下。在过去的一年里，专业上还是以基础为主要，在python的陪伴下，又走过了一年；绘画上，依然还是原地打转，当然，还是莫急，现在还是积累，对于排线的熟练度较之前有了些许进步；阅读上，还是以专业书籍为核心，过去读了<code>25</code> （有记录）；PS，SAI的熟练度相比去年又进步了；当然，新年伊始，还是有好多事情可以折腾的。<code>自我技能树</code> 还在一步步开发中……总之，现在人生宗旨是以“瞎折腾，搞事请”为主。最后，附上图板绘图一张233333。</p><p><img src="http://p6akdr6oo.bkt.clouddn.com/dog.jpg" alt="柒小猫"></p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂感 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Who are you? writeup</title>
      <link href="/2018/02/04/2018-02-04-WHOAREYOU/"/>
      <url>/2018/02/04/2018-02-04-WHOAREYOU/</url>
      <content type="html"><![CDATA[<p>对于第一次做线上题的一个小结。</p><a id="more"></a><h1 id="WHO-ARE-YOU-–writeup"><a href="#WHO-ARE-YOU-–writeup" class="headerlink" title="WHO ARE YOU?–writeup"></a>WHO ARE YOU?–writeup</h1><p>TIPS:广东强网杯线上题</p><p>总结知识点：BASE64,ROT13（部分知识源自维基百科）</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><blockquote><ul><li>什么是Base64?</li><li>Base64编码原理</li><li>其用途</li></ul></blockquote><ul><li>什么是Base64?<ul><li><strong>Base64</strong>是一种基于64个可打印字符来表示<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6" target="_blank" rel="noopener">二进制数据</a>的表示方法。（源于维基百科）</li><li>说白了就是一种用64个字符表示二进制数据的方法。</li></ul></li><li><p>Base编码原理</p><p>由于 2^6^ = 64,也就是说每6个位元为一个单元，对应某个可以打印字符。3个字节有24个位元，对应4个Base64单元，也就是可以打印4个字符。通过使用包括<a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E4%B8%81%E5%AD%97%E6%AF%8D" target="_blank" rel="noopener">字母</a><code>A-Z</code>、<code>a-z</code>、<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97" target="_blank" rel="noopener">数字</a><code>0-9</code>，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。若原数据的长度为3的倍数且剩下一个输入数据则最后加两个<code>=</code> ；若元数据长度只剩下一个输入数据，则加一个<code>=</code>。</p></li><li><p>用途</p><ul><li>本次题目结合主要利用在HTTP头部报文里，当然也有应用于邮件等。</li><li>url运用这个编码传输长数据</li></ul></li></ul><h3 id="ROT13"><a href="#ROT13" class="headerlink" title="ROT13"></a>ROT13</h3><blockquote><ul><li>ROT13是什么？</li><li>原理</li></ul></blockquote><ul><li>ROT13是什么？<ul><li><strong>ROT13</strong>（<strong>迴轉13位</strong>，<strong>rotate by 13 places</strong>，有時中間加了個<a href="https://zh.wikipedia.org/wiki/%E8%BF%9E%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">连字符</a>稱作<strong>ROT-13</strong>）是一種簡易的<a href="https://zh.wikipedia.org/wiki/%E6%9B%BF%E6%8D%A2%E5%BC%8F%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">替換式密碼</a>。</li><li>ROT13 也是過去在<a href="https://zh.wikipedia.org/wiki/%E5%8F%A4%E7%BD%97%E9%A9%AC" target="_blank" rel="noopener">古羅馬</a>開發的<a href="https://zh.wikipedia.org/wiki/%E5%87%B1%E6%92%92%E5%AF%86%E7%A2%BC" target="_blank" rel="noopener">凱撒加密</a>的一種變體。(源于维基百科)</li></ul></li><li>原理描述<ul><li>对任何字元x：$ROT$~13~($ROT$~13~($x$)) = $ROT $ ~26~ $(x)$ = $x$ .</li><li>套用ROT13到一段文字上僅僅只需要檢查字元字母順序並取代它在13位之後的對應<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E7%B3%BB%E7%B5%B1" target="_blank" rel="noopener">字母</a>，有需要超過時則重新繞回26英文字母開頭即可<a href="https://zh.wikipedia.org/wiki/ROT13#cite_note-schneier-2" target="_blank" rel="noopener">[2]</a>。 <code>A</code>換成<code>N</code>、<code>B</code>換成<code>O</code>、依此類推到<code>M</code>換成<code>Z</code>，然後序列反轉：<code>N</code>換成<code>A</code>、<code>O</code>換成<code>B</code>、最後<code>Z</code>換成<code>M</code>。只有這些出現在<a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D" target="_blank" rel="noopener">英文字母</a>裡頭的字元受影響；<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E5%AD%97" target="_blank" rel="noopener">數字</a>、<a href="https://zh.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7" target="_blank" rel="noopener">符號</a>、<a href="https://zh.wikipedia.org/w/index.php?title=%E7%A9%BA%E7%99%BD%E5%AD%97%E5%85%83&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">空白字元</a>以及所有其他字元都不變。因為只有在英文字母表裡頭只有26個，並且26 = 2 × 13，ROT13函數是它自己的<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%87%BD%E6%95%B8" target="_blank" rel="noopener">逆反</a>：<a href="https://zh.wikipedia.org/wiki/ROT13#cite_note-schneier-2" target="_blank" rel="noopener">[2]</a> </li></ul></li></ul><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>知道了上面的知识，再来看这题：<a href="http://106.75.72.168:2222/" target="_blank" rel="noopener">WHO ARE YOU</a> </p><p>点进去发现：</p><p><img src="http://p6akdr6oo.bkt.clouddn.com/1-1.png" alt="1-1"></p><p>这时候再来看看源码，发现并没有神马提示。按照我这个小白的理解，前端没提示，多半是后台，那么考虑服务端了。于是用BP截取数据包。</p><p>诺~看http头</p><p><img src="http://p6akdr6oo.bkt.clouddn.com/1-2.png" alt="1-2"></p><p>看到这行Cookie，觉得这里大有文章，于是就试了试将role的值进行了BASE64解码。得到了这个<code>f:5:&quot;thrfg&quot;;</code> 这个什么意思啊？也是思路停了好久，才知道这玩意可能是ROT13，好吧，线上解码</p><p><code>s:5:&quot;guest&quot;;</code> 得到了这个。那么试试改成<code>admin</code> ;再逆转编码，这时候就得到了<code>f:5:&quot;nqzvag&quot;;</code></p><p>再BASE64编码一次更改cookie值就可以得到源码提示了。</p><p><img src="http://p6akdr6oo.bkt.clouddn.com/1-3.png" alt="1-3"></p><p><strong>构造Payload</strong></p><p>filename=1.php&amp;data[]=’123’</p><p>之后就得到flag文件了。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP大法好--Writeup</title>
      <link href="/2018/01/28/2018-01-28-CTF2/"/>
      <url>/2018/01/28/2018-01-28-CTF2/</url>
      <content type="html"><![CDATA[<p>这次再次做到了一题代码审计的题目</p><a id="more"></a><h1 id="PHP大法好正确操作方式"><a href="#PHP大法好正确操作方式" class="headerlink" title="PHP大法好正确操作方式"></a>PHP大法好正确操作方式</h1><ul><li>​</li></ul><p>Writeup思路：</p><blockquote><p>1) 审题</p><p>2）找到源代码</p><p>3）代码分析</p><p>4) 原因总结</p></blockquote><h2 id="1）审题"><a href="#1）审题" class="headerlink" title="1）审题"></a>1）审题</h2><p>  题目： <a href="http://ctf5.shiyanbar.com/DUTCTF/index.php" title="（题目地址）" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/DUTCTF/index.php </a></p><p>  <img src="https://i.imgur.com/pXx02gD.png" alt="1-1"><br>​    </p><p> 这题的提示是“注意备份文件”，有什么用呢？<br> 点开网页看到一行文字：</p><p> <img src="https://i.imgur.com/3JSNggB.png" alt="1-2"></p><h2 id="2）找到源代码"><a href="#2）找到源代码" class="headerlink" title="2）找到源代码"></a>2）找到源代码</h2><p>于是试着在url上加上 <strong>.txt</strong> 然后就看到一串服务器端的代码</p><pre><code>&lt;?phpif(eregi(&quot;hackerDJ&quot;,$_GET[id])) {  echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;);  exit();}$_GET[id] = urldecode($_GET[id]);if($_GET[id] == &quot;hackerDJ&quot;){  echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;;  echo &quot;&lt;p&gt;flag: *****************} &lt;/p&gt;&quot;;}?&gt;&lt;br&gt;&lt;br&gt;Can you authenticate to this website?</code></pre><h2 id="3）代码分析："><a href="#3）代码分析：" class="headerlink" title="3）代码分析："></a>3）代码分析：</h2><p>  逻辑分析：这段代码的意思可以看到就是判断获得的字符串是否是hackerDJ，如果是就可以拿到flag；</p><p>  细节分析：$_GET[id] = urldecode($_GET[id]);这个函数，在php文档的说明是对传递进来的参数进行一个url的解码，就是解码已经编码的函数；且官方文档的例子是string类型的；<br>  之后我在文档看到这串文字</p><p>  <img src="https://i.imgur.com/qzr52LF.png" alt="1-3"></p><p>  而这题里要进行的编码正好是$_GET，所以我的理解就是解码已经解码过的参数那么，对于这里要想传入正确的值，只有通过双编码才行了，于是使用bp进行二次编码，然后再放到url上构造语句：<br>  index.php?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37</p><p>  %32%25%34%34%25%34%41(hackDJ的url双编码)</p><p>  就可以拿到flag了。</p><h2 id="4）原因总结"><a href="#4）原因总结" class="headerlink" title="4）原因总结"></a>4）原因总结</h2><p> 根据这题的分析，可以看到了，平时管理员们，会出现一些备份文件没有处理好的大意的地方，才会暴露了这样的问题。<strong>论养成良好的管理习惯的重要性！！！</strong></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浮动静态路由的配置实验</title>
      <link href="/2018/01/27/2018-01-27-%E6%B5%AE%E5%8A%A8%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/01/27/2018-01-27-%E6%B5%AE%E5%8A%A8%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>对于该静态路由的一个配置记录~</p><a id="more"></a><h1 id="浮动静态路由的配置实验"><a href="#浮动静态路由的配置实验" class="headerlink" title="浮动静态路由的配置实验"></a>浮动静态路由的配置实验</h1><h3 id="网络拓扑-如下："><a href="#网络拓扑-如下：" class="headerlink" title="网络拓扑 如下："></a>网络拓扑 如下：</h3><p><img src="http://i.imgur.com/57xVZ6g.png" alt=""></p><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><h3 id="1-了解静态路由的配置；"><a href="#1-了解静态路由的配置；" class="headerlink" title="1.了解静态路由的配置；"></a>1.了解静态路由的配置；</h3><h3 id="2-了解浮动路由的应用范围；"><a href="#2-了解浮动路由的应用范围；" class="headerlink" title="2.了解浮动路由的应用范围；"></a>2.了解浮动路由的应用范围；</h3><h3 id="3-进一步了解Ping和tracert的作用；"><a href="#3-进一步了解Ping和tracert的作用；" class="headerlink" title="3.进一步了解Ping和tracert的作用；"></a>3.进一步了解Ping和tracert的作用；</h3><h3 id="4-明白开销值在其中的作用；"><a href="#4-明白开销值在其中的作用；" class="headerlink" title="4.明白开销值在其中的作用；"></a>4.明白开销值在其中的作用；</h3><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a><strong>实验步骤</strong></h3><h4 id="1-先划分不同的网段，这个拓扑中一共有6个网段；"><a href="#1-先划分不同的网段，这个拓扑中一共有6个网段；" class="headerlink" title="1.先划分不同的网段，这个拓扑中一共有6个网段；"></a>1.先划分不同的网段，这个拓扑中一共有6个网段；</h4><h4 id="2-然后分别给PC、switch、router进行配置；"><a href="#2-然后分别给PC、switch、router进行配置；" class="headerlink" title="2.然后分别给PC、switch、router进行配置；"></a>2.然后分别给PC、switch、router进行配置；</h4><h4 id="3-配置完成后，进行Ping测试；"><a href="#3-配置完成后，进行Ping测试；" class="headerlink" title="3.配置完成后，进行Ping测试；"></a>3.配置完成后，进行Ping测试；</h4><h4 id="4-之后，再进行端口的断线测试；"><a href="#4-之后，再进行端口的断线测试；" class="headerlink" title="4.之后，再进行端口的断线测试；"></a>4.之后，再进行端口的断线测试；</h4><h3 id="实验交换机的配置命令："><a href="#实验交换机的配置命令：" class="headerlink" title="实验交换机的配置命令："></a>实验交换机的配置命令：</h3><h5 id="进入交换机的用户模式"><a href="#进入交换机的用户模式" class="headerlink" title="进入交换机的用户模式"></a>进入交换机的用户模式</h5><blockquote><p>en</p></blockquote><h5 id="进入配置模式"><a href="#进入配置模式" class="headerlink" title="进入配置模式"></a>进入配置模式</h5><blockquote><p>config t</p></blockquote><h5 id="分配vlan-10"><a href="#分配vlan-10" class="headerlink" title="分配vlan 10"></a>分配vlan 10</h5><blockquote><p>vlan 10</p></blockquote><h5 id="退出vlan"><a href="#退出vlan" class="headerlink" title="退出vlan"></a>退出vlan</h5><blockquote><p>exit </p></blockquote><h5 id="重新进入vlan10"><a href="#重新进入vlan10" class="headerlink" title="重新进入vlan10"></a>重新进入vlan10</h5><blockquote><p>interface vlan 10</p></blockquote><h5 id="给vlan进行Ip分配"><a href="#给vlan进行Ip分配" class="headerlink" title="给vlan进行Ip分配"></a>给vlan进行Ip分配</h5><blockquote><p>ip address xxx.xxx.xxx(给vlan10配置Ip)</p></blockquote><h4 id="交换机端口设置的命令："><a href="#交换机端口设置的命令：" class="headerlink" title="交换机端口设置的命令："></a>交换机端口设置的命令：</h4><pre><code>enconfig t int fa0/0sw mode access sw access vlan 10no shutdownexit</code></pre><h4 id="路由器的配置命令："><a href="#路由器的配置命令：" class="headerlink" title="路由器的配置命令："></a>路由器的配置命令：</h4><pre><code>enconfig t int gi0/0 ip address xxx.xxx.xxx no shutdown exit(退出该端口)</code></pre><p>​    </p><h4 id="静态路由的配置"><a href="#静态路由的配置" class="headerlink" title="静态路由的配置"></a>静态路由的配置</h4><pre><code>ip route  [source port]  [mask]  [netgatway] [开销值]</code></pre><h3 id="测试环节"><a href="#测试环节" class="headerlink" title="测试环节"></a>测试环节</h3><h4 id="ping测试"><a href="#ping测试" class="headerlink" title="ping测试"></a>ping测试</h4><p><img src="http://i.imgur.com/O3oxScH.png" alt=""></p><h4 id="tracert测试"><a href="#tracert测试" class="headerlink" title="tracert测试"></a>tracert测试</h4><p><img src="http://i.imgur.com/gBZ92Qv.png" alt=""></p><h4 id="断线测试"><a href="#断线测试" class="headerlink" title="断线测试"></a>断线测试</h4><h5 id="就是使黄线部分的端口断开，然后测试能不能PIng通"><a href="#就是使黄线部分的端口断开，然后测试能不能PIng通" class="headerlink" title="就是使黄线部分的端口断开，然后测试能不能PIng通"></a>就是使黄线部分的端口断开，然后测试能不能PIng通</h5><h5 id="在实验中不能ping通的，必须将78-9到78-10这段也断开，才能使备份的路由启动，"><a href="#在实验中不能ping通的，必须将78-9到78-10这段也断开，才能使备份的路由启动，" class="headerlink" title="在实验中不能ping通的，必须将78.9到78.10这段也断开，才能使备份的路由启动，"></a>在实验中不能ping通的，必须将78.9到78.10这段也断开，才能使备份的路由启动，</h5><h5 id="因此，在这种类似的相对复杂点的网络拓扑中，如果使用浮动路由的配置，其实作用不大。"><a href="#因此，在这种类似的相对复杂点的网络拓扑中，如果使用浮动路由的配置，其实作用不大。" class="headerlink" title="因此，在这种类似的相对复杂点的网络拓扑中，如果使用浮动路由的配置，其实作用不大。"></a>因此，在这种类似的相对复杂点的网络拓扑中，如果使用浮动路由的配置，其实作用不大。</h5><p><img src="http://i.imgur.com/zmRkv4S.png" alt=""></p><h4 id="配置过程遇到的问题"><a href="#配置过程遇到的问题" class="headerlink" title="配置过程遇到的问题"></a>配置过程遇到的问题</h4><blockquote><p>1  配置过程中遇到的一个问题就是没明白这个网络拓扑图的真正意图，以为图中的黄线部分只要断开了，那么通过浮动路由的配置就会产生浮动，然后跟踪路由发现，一直在78.9到78.10这之间跳动，后来，我试着将78.9到78.10这一网段之间也断开，然后另一段的网段就通了，其实是发生了浮动路由转移的，但是那会我还是没明白，其实这就是浮动静态路由的弊端，在类似的这些网络拓扑图中，浮动路由其实没有多大的意义。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> 静态路由 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ONCE MORE的正确打开姿势</title>
      <link href="/2018/01/27/2018-01-27-CTF/"/>
      <url>/2018/01/27/2018-01-27-CTF/</url>
      <content type="html"><![CDATA[<p>作为一个代码审计方面的小白，第一次遇到这样的题目，虽然做出来了，但是还是要秉着分享的态度把这次的题目经验写出来的。</p><a id="more"></a><h1 id="ONCE-MORE-of-write-up"><a href="#ONCE-MORE-of-write-up" class="headerlink" title="ONCE MORE of write up"></a>ONCE MORE of write up</h1><pre><code>write up:1&gt;题目url2&gt;初步检测3&gt;查看源代码4&gt;分析代码构造语句</code></pre><h3 id="gt-1-题目：-http-ctf5-shiyanbar-com-web-more-php"><a href="#gt-1-题目：-http-ctf5-shiyanbar-com-web-more-php" class="headerlink" title="&gt;1 题目：  http://ctf5.shiyanbar.com/web/more.php "></a>&gt;1 题目： <a href="http://ctf5.shiyanbar.com/web/more.php" title="(Once more)" target="_blank" rel="noopener"> http://ctf5.shiyanbar.com/web/more.php </a></h3><p>  首先，看看题目有什么提示，如图：</p><p>  <img src="https://i.imgur.com/HzvVac9.png" alt="(代码审计)"> </p><h3 id="gt-2-初步检测"><a href="#gt-2-初步检测" class="headerlink" title="&gt;2 初步检测"></a>&gt;2 初步检测</h3><p>  可以看到提示了ereg()函数有漏洞，还有就是使用科学的方法来算数；先mark着；<br>  在password里输入了111来检测</p><p>  <img src="https://i.imgur.com/xy2jela.png" alt="（代码审计2）">  </p><p>  输入完之后</p><p>  <img src="https://i.imgur.com/QRIvUrY.png" alt="（代码审计3）"></p><h3 id="gt-3-查看源代码"><a href="#gt-3-查看源代码" class="headerlink" title="&gt;3 查看源代码"></a>&gt;3 查看源代码</h3><p>  这时候看到 <strong>view the source code</strong> 可以点开打开源码进行查看<br>  贴上源代码：</p><pre><code>&lt;?php if (isset ($_GET[&apos;password&apos;])) { if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&apos;password&apos;]) === FALSE) {     echo &apos;&lt;p&gt;You password must be alphanumeric&lt;/p&gt;&apos;; } else if (strlen($_GET[&apos;password&apos;]) &lt; 8 &amp;&amp; $_GET[&apos;password&apos;] &gt; 9999999) {     if (strpos ($_GET[&apos;password&apos;], &apos;*-*&apos;) !== FALSE)     {         die(&apos;Flag: &apos; . $flag);     }     else     {         echo(&apos;&lt;p&gt;*-* have not been found&lt;/p&gt;&apos;);     } } else {     echo &apos;&lt;p&gt;Invalid password&lt;/p&gt;&apos;; }}?&gt;</code></pre><h3 id="gt-4-分析代码构造语句"><a href="#gt-4-分析代码构造语句" class="headerlink" title="&gt;4 分析代码构造语句"></a>&gt;4 分析代码构造语句</h3><p>   首先，在ereg()函数里可以看到两个条件：1.字母大小写和数字，2.须是password里的；这时候直接跳到下一个判断语句，（strlen($_GET[‘password’]）这里提示了字符长度必须小于8，且要求大于9999999（$_GET[‘password’] &gt; 9999999）那么，之前提示的是科学计算法，我们可以尝试使用。因为科学计算法里e相当于10，又要大于一定的数值，例如：1.88e3 = 1880;所以我们可以这么构造，<br>   3e9这样可以通过了判断条件，且满足了大于9999999，但是在strpos()这个函数里我们发现这里还有个判断条件，就是 “ *-* ” ，既要满足之前的ereg()里的只带数字和大小写字母，又要满足小于8个字节的大于9999999的语句，怎么做到呢？</p><p>   在没有思路的情况下，我们在看看之前的提示，有一个就是ereg()漏洞，bing了一通之后，我发现，ereg()的漏洞可以利用%00来终结判断，从而该语句就是“3e9%00*-<em>” 这句语句的意思就是终止对 \</em>-* 之前的判断，我们就可以直接绕过ereg()函数对password整句的判断，从而完成了对语句的构造。</p><p>  <strong>TIS</strong>：最后还有个对于小白来说的一个陷阱，就是在该页面提交的数据，因为是get方法提交的，所以前端会对其进行一个url编码，那么，该数据会被进行转义，所以，这时候我们可以不通过页面前端进行提交，可以在URL上进行编写，也可以使用bp绕过浏览器直接提交给服务端。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IP路由过程分析</title>
      <link href="/2018/01/27/2018-01-27-%E8%B7%AF%E7%94%B1IP%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/01/27/2018-01-27-%E8%B7%AF%E7%94%B1IP%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>IP路由过程的简单分析。</p><a id="more"></a><h1 id="IP路由过程分析"><a href="#IP路由过程分析" class="headerlink" title="IP路由过程分析"></a>IP路由过程分析</h1><hr><p><img src="http://i.imgur.com/v57mT6n.png" alt="图1-1"></p><p><strong>  首先，PC A(以下简称为A)要向B发送一个数据，这时候，A的MAC地址就是图上所示，A要发的目的MAC就是B的00：20：AF：00:00:02，而源目的MAC就是A的，这时候就二层的数据链路层就把A的数据进行数据封装，然后进行传给上层的网络层的设备路由器，这时候，和A同一个网段的路由器端口<br>fei_1/1接收到了数据，对数据进行解封，剥离掉二层数据，判断这个数据是否是给自己，如果是就再封装给上层，如果不是就根据自己的路由表进行查询，找到下一个的路由器的端口IP，若找到了路由表上的端口就转发，若不然就抛弃掉。这时候根据路由表里的信息主要有两个，一个就是连接的下一个端口就是fei_1/2,另一个就是关于A想要发送给B的数据，里面包括的目的IP和源IP都没有发生变化，于是，路由器识别到转发的下一个端口就是fei_1/2，所以这时候发给了B，而B接收到了数据就进行二层的解封，然后就识别到了这是给自己的一个数据，这就是一个经由路由IP转发的过程。</strong></p><p><strong> 小结： </strong></p><pre><code>经过这个流程的分析我发现路由器在转发数据的过程，和A相连的端口是路由器的其中一个端口不是路由器的本身的网络，另外就是数据的转发经过了二层和三层，其中没变的就是里面的数据,即目的IP，源IP没变，而变化的就是在MAC的变化，也就是说MAC变，IP不变。从而完成了从物理网卡的转移到逻辑上的数据转移。</code></pre>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rip实验的配置</title>
      <link href="/2018/01/27/2018-01-27-rip%E8%B7%AF%E7%94%B1%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/01/27/2018-01-27-rip%E8%B7%AF%E7%94%B1%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>rip实验的简单配置。</p><a id="more"></a><h1 id="rip实验的配置"><a href="#rip实验的配置" class="headerlink" title="rip实验的配置"></a>rip实验的配置</h1><hr><h3 id="网络拓扑图："><a href="#网络拓扑图：" class="headerlink" title="网络拓扑图："></a>网络拓扑图：</h3><p><img src="http://i.imgur.com/4VZqZdA.png" alt=""></p><h3 id="实验材料："><a href="#实验材料：" class="headerlink" title="实验材料："></a>实验材料：</h3><pre><code>系统环境：win7系统模拟软件：PacketTracer6</code></pre><hr><h4 id="什么是rip"><a href="#什么是rip" class="headerlink" title="什么是rip?"></a>什么是rip?</h4><p> <strong>rip</strong>  <strong>如图，R0只知道192.168.78.0以及另一段的192.168.78.4和它相连的两个网段，</strong><br><strong>但是，对于R1,R2而言，路由器不知道这些网段的存在，因此，需要一个协议来告诉其他路由器这些网段的存在，而rip就是这个作用，将R0的路由表同时转发到其他的路由器上，这样，几个路由器都知道这些网段的存在了。</strong></p><h3 id="路由器关于rip的配置如下："><a href="#路由器关于rip的配置如下：" class="headerlink" title="路由器关于rip的配置如下："></a>路由器关于rip的配置如下：</h3><pre><code>router ripnetwork  net [wildmask]</code></pre><h3 id="上面的两个命令行，一个是开启rip模式，如果想要关闭就在rip前面加上No"><a href="#上面的两个命令行，一个是开启rip模式，如果想要关闭就在rip前面加上No" class="headerlink" title="上面的两个命令行，一个是开启rip模式，如果想要关闭就在rip前面加上No"></a>上面的两个命令行，一个是开启rip模式，如果想要关闭就在rip前面加上No</h3><pre><code>eg. no network</code></pre><h3 id="network的意思就是将自己的路由表告知其他的路由器，这些网段的存在。"><a href="#network的意思就是将自己的路由表告知其他的路由器，这些网段的存在。" class="headerlink" title="network的意思就是将自己的路由表告知其他的路由器，这些网段的存在。"></a>network的意思就是将自己的路由表告知其他的路由器，这些网段的存在。</h3><h3 id="其实rip的作用就相当于一个存储命令行的云，接收后就将这些网段告知其他的路由器；"><a href="#其实rip的作用就相当于一个存储命令行的云，接收后就将这些网段告知其他的路由器；" class="headerlink" title="其实rip的作用就相当于一个存储命令行的云，接收后就将这些网段告知其他的路由器；"></a>其实rip的作用就相当于一个存储命令行的云，接收后就将这些网段告知其他的路由器；</h3><h4 id="实验结果："><a href="#实验结果：" class="headerlink" title="实验结果："></a>实验结果：</h4><blockquote><p>本次rip的实验中ping通了。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> rip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ospf路由转发功能</title>
      <link href="/2018/01/27/2018-01-27-ospf%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/01/27/2018-01-27-ospf%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>三层交换机的ospf的简单配置。</p><a id="more"></a><h1 id="三层交换机ospf的配置"><a href="#三层交换机ospf的配置" class="headerlink" title="三层交换机ospf的配置"></a>三层交换机ospf的配置</h1><h3 id="网络拓扑图如下："><a href="#网络拓扑图如下：" class="headerlink" title="网络拓扑图如下："></a>网络拓扑图如下：</h3><p><img src="http://i.imgur.com/xLXCgEU.png" alt=""></p><p>之前提到过关于ospf，是在路由器上配，这次的网络拓扑图里包含有三层交换机，顾名思义，就是在第三层的交换机，具有一定的路由转发功能；所以本次的配置关键就在于打开三层交换机的路由转发功能。</p><h3 id="路由器上的配置"><a href="#路由器上的配置" class="headerlink" title="路由器上的配置"></a>路由器上的配置</h3><p>参考之前的简单的ospf的配置，在路由上的配置差不多；</p><h3 id="三层交换机的配置"><a href="#三层交换机的配置" class="headerlink" title="三层交换机的配置"></a>三层交换机的配置</h3><p>关于交换机的配置到时候会重新写个配置的文档，所以这里不做过多的阐述；</p><blockquote><p>sw(config)#ip routing</p></blockquote><blockquote><p>这行命令是在告诉三层交换机打开路由转发功能，重点就是这句，然后就是在这个网络拓扑图的配置了。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> ospf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ACL原理小结</title>
      <link href="/2018/01/27/2018-01-27-acl%E9%9A%8F%E7%AC%94/"/>
      <url>/2018/01/27/2018-01-27-acl%E9%9A%8F%E7%AC%94/</url>
      <content type="html"><![CDATA[<p>对于ACL原理的一个小结。</p><a id="more"></a><h1 id="ACL原理"><a href="#ACL原理" class="headerlink" title="ACL原理"></a>ACL原理</h1><h3 id="ACL概念"><a href="#ACL概念" class="headerlink" title="ACL概念"></a>ACL概念</h3><p>   <strong>Access Control List</strong>  访问控制列表</p><p>   简言之，就是一个为了更好的控制不断扩大的网络的规则；</p><p>   eg.四个应用：ACL、DHCP、NAT、</p><p>   非必需触发条件：时间或事件；</p><p>   定义报文匹配规则；条件和动作（permit or deny）</p><p><strong> eg.  校园网案例 </strong></p><h4 id="ACL的分类"><a href="#ACL的分类" class="headerlink" title="ACL的分类"></a>ACL的分类</h4><p>标准ACL</p><blockquote><p><strong>源Ip地址</strong></p></blockquote><p>端口号（指的是目的端口）eg.http的端口80或者8080</p><p><img src="http://i.imgur.com/0RYMlCd.png" alt=""></p><p> <strong>现在存在的路由器大多数都配置了ACL</strong></p><p> <strong>ACL的工作原理就是无限次的匹配，一直执行到最后的一条，执行每一条的规则，例如允许，拒绝；</strong></p><p> <strong>考虑ACL放在In端口还是out端口；</strong></p><p> <strong>ACL里还有个默认的规则，拒绝所有的端口进入。</strong></p><p> <strong>扩展ACL尽量靠近源IP地址</strong></p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> ACL原理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 基本操作姿势</title>
      <link href="/2018/01/22/2018-01-22-tools-for-git/"/>
      <url>/2018/01/22/2018-01-22-tools-for-git/</url>
      <content type="html"><![CDATA[<p>人的习惯养成大概需要三周（也就是21天），而在习惯之前，我们需要做的就是反复操作，让身体记住；因此才有这些小结的文章。</p><a id="more"></a><h1 id="git-基本命令集合"><a href="#git-基本命令集合" class="headerlink" title="git 基本命令集合"></a><strong><em>git 基本命令集合</em></strong></h1><h3 id="Tips-为了不让18天后的自己忘记这些操作，因此，我才觉得有必要写点什么，以避免未来的自己忘记这些东西。"><a href="#Tips-为了不让18天后的自己忘记这些操作，因此，我才觉得有必要写点什么，以避免未来的自己忘记这些东西。" class="headerlink" title="Tips:为了不让18天后的自己忘记这些操作，因此，我才觉得有必要写点什么，以避免未来的自己忘记这些东西。"></a>Tips:为了不让18天后的自己忘记这些操作，因此，我才觉得有必要写点什么，以避免未来的自己忘记这些东西。</h3><h2 id="整体思路："><a href="#整体思路：" class="headerlink" title="整体思路："></a>整体思路：</h2><pre><code>1）通过git上传文章2）如何上传文章到blog3）具体的git命令操作</code></pre><h3 id="1）通过git上传文章"><a href="#1）通过git上传文章" class="headerlink" title="1）通过git上传文章"></a>1）<strong>通过git上传文章</strong></h3><h4 id="因为现在在githu上玩博客，因此，对于我现在的来说通过git上传文章很有必要，当然还有其他的例子，不过个人觉得现阶段为止这是我最舒服的方式；那么如何通过git上传文章呢？"><a href="#因为现在在githu上玩博客，因此，对于我现在的来说通过git上传文章很有必要，当然还有其他的例子，不过个人觉得现阶段为止这是我最舒服的方式；那么如何通过git上传文章呢？" class="headerlink" title="因为现在在githu上玩博客，因此，对于我现在的来说通过git上传文章很有必要，当然还有其他的例子，不过个人觉得现阶段为止这是我最舒服的方式；那么如何通过git上传文章呢？"></a>因为现在在githu上玩博客，因此，对于我现在的来说通过git上传文章很有必要，当然还有其他的例子，不过个人觉得现阶段为止这是我最舒服的方式；那么如何通过git上传文章呢？</h4><h3 id="2）如何上传文章到git"><a href="#2）如何上传文章到git" class="headerlink" title="2）如何上传文章到git?"></a>2）<strong>如何上传文章到git?</strong></h3><h4 id="文章通过git上传到blog的方式，其实就是相当于把文章托管到github下的服务器，简单理解过程为：本地文章（电脑文章）—-gt-github上的服务器—-gt-静态页面（blog）展示。"><a href="#文章通过git上传到blog的方式，其实就是相当于把文章托管到github下的服务器，简单理解过程为：本地文章（电脑文章）—-gt-github上的服务器—-gt-静态页面（blog）展示。" class="headerlink" title="文章通过git上传到blog的方式，其实就是相当于把文章托管到github下的服务器，简单理解过程为：本地文章（电脑文章）—&gt;github上的服务器—&gt;静态页面（blog）展示。"></a>文章通过git上传到blog的方式，其实就是相当于把文章托管到github下的服务器，简单理解过程为：本地文章（电脑文章）—&gt;github上的服务器—&gt;静态页面（blog）展示。</h4><h3 id="3）具体的git命令操作"><a href="#3）具体的git命令操作" class="headerlink" title="3）具体的git命令操作"></a>3）具体的git命令操作</h3><h4 id="3-1）先初始化本地仓库（如果路径没变可以忽略）"><a href="#3-1）先初始化本地仓库（如果路径没变可以忽略）" class="headerlink" title="3.1）先初始化本地仓库（如果路径没变可以忽略）"></a>3.1）先初始化本地仓库（如果路径没变可以忽略）</h4><pre><code>git init #这步将会在本地文件夹下产生一个.git文件夹，如图：</code></pre><p><img src="https://i.imgur.com/1RgrZD2.png" alt=""></p><h4 id="3-2）监听文件"><a href="#3-2）监听文件" class="headerlink" title="3.2）监听文件"></a>3.2）监听文件</h4><pre><code>git add 相关文件  #e.g git add test.py(如果是批量的话可以使用通配符*.py)</code></pre><h4 id="3-3）commit告诉仓库更改的信息"><a href="#3-3）commit告诉仓库更改的信息" class="headerlink" title="3.3）commit告诉仓库更改的信息"></a>3.3）commit告诉仓库更改的信息</h4><pre><code>git commit -m&quot;add test.py&quot;</code></pre><h4 id="3-4-push文件到博客"><a href="#3-4-push文件到博客" class="headerlink" title="3.4)push文件到博客"></a>3.4)push文件到博客</h4><pre><code>git push origin master #上传的文件以master的方式上传到github</code></pre><p>  <strong>Tips:为了不让18天以后的自己忘记了这些命令！</strong></p><h3 id="最后再push一张很早以前总结的命令流程图，具体的git命令可以bing或者google相关教程"><a href="#最后再push一张很早以前总结的命令流程图，具体的git命令可以bing或者google相关教程" class="headerlink" title="最后再push一张很早以前总结的命令流程图，具体的git命令可以bing或者google相关教程"></a>最后再push一张很早以前总结的命令流程图，具体的git命令可以bing或者google相关教程</h3><p><img src="https://i.imgur.com/3AIcNGS.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> git </tag>
            
            <tag> 小结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用好 Goole 的正确姿势</title>
      <link href="/2018/01/07/2018-01-07-google-for-internet/"/>
      <url>/2018/01/07/2018-01-07-google-for-internet/</url>
      <content type="html"><![CDATA[<p>这个网络的时代，需要我们会使用搜索引擎，想要有更好的学术和技术查找体验，Google无疑是一个不错的选择，那么如何操作会使我们事半功倍呢？</p><a id="more"></a><p>【转载自simplyY】如何用好 Google 等搜索引擎？</p><p><a href="http://bzy.me/aff.php?aff=214" title="该链接" target="_blank" rel="noopener">http://bzy.me/aff.php?aff=214</a></p><pre><code>这家ss提供商服务还是很不错的，性价比高，而且比较稳定。</code></pre><p>核心思想<br>1、首先，想好你想要寻找什么。</p><pre><code>哪些词能够最好地描述你要寻找的信息或者概念？哪些词是你能够用来替换的？有没有那些词是可以不必包括在你想要搜索的更好定义你的需求之内？</code></pre><p>2、构建你的搜索要求。</p><pre><code>使用尽可能多你所需要的关键词；越多越好。如果皆存在可能的话，试着用适当的搜索操作来使你的搜索更精炼——或者，如果你愿意的话，可以使用高级搜索页面（时间、语言）。</code></pre><p>以及关键词一定要分隔开。<br>3、评估一下搜索结果页面上的匹配程度。</p><p>如果一开始的结果与你想要的不一致，再精炼你的搜索要求并重新搜索——或转向更合适的搜索站点再进行搜索。<br>4、选择你想要查看的匹配的页面</p><pre><code>通过网页标题url还有正文，一般而言，被显示出来的正文往往是，你想找的答案最近的地方，如果你看到了，请毫不犹豫的复制关键词，进入网页后用 ctrl + f or cmd + f 关键词。</code></pre><p>基本命令：</p><p>注意： 所有高效命令中的冒号是英文的冒号，且后面紧跟参数<br>1、双引号</p><p>把搜索词放在双引号中，代表完全匹配搜索<br>2、减号</p><p>减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。 例如：搜索 -引擎 返回的则是包含“搜索”这个词，却不包含“引擎”这个词的结果<br>3、星号(需记忆)</p><p>星号<em>是常用的通配符，也可以用在搜索中。百度不支持</em>号搜索指令。 比如在Google 中搜索：搜索<em>擎 其中的</em>号代表任何文字。<br>高效命令<br>4、inurl(需记忆)</p><p>inurl:xx 指令用于搜索查询词出现在url 中的页面。bd和Google 都支持inurl 指令。inurl 指令支持中文和英文。<br>6、intitle</p><p>intitle:xx 指令返回的是页面title 中包含关键词的页面。<br>7、allintitle</p><p>allintitle:搜索返回的是页面标题中包含多组关键词的文件。 例如 ：allintitle:SEO 搜索引擎优化 就相当于：intitle:SEO intitle:搜索引擎优化<br>9、filetype(需记忆)</p><p>用于搜索特定文件格式。 比如搜索filetype:pdf SEO 返回的就是包含SEO 这个关键词的所有pdf 文件。用于找资料，ppt？pdf？word？等。<br>10、site</p><p>site:是SEO 最熟悉的高级搜索指令，用来搜索某个域名下的所有文件。 举例，对于坑爹的知乎搜索的替代搜索功能方案，使用谷歌，关键词 + site:zhihu.com（必须是完整域名） 即可精确搜索所有知乎答案。 这个很常用</p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习资料 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>再见，2017！ 你好，2018！</title>
      <link href="/2018/01/06/2018-01-06-tools-for-jekyll/"/>
      <url>/2018/01/06/2018-01-06-tools-for-jekyll/</url>
      <content type="html"><![CDATA[<p>在刚刚过去的2017年里，回过头来，发现还是没有读多少本书，但是，依然还是有值得高兴的事情。正如杜甫所言“天地一行间，忽如远行客。”，在与人相处的过程中，明白了，人生不过是相遇、分离的过程……我在其中明白了，“莫思身外无穷事，且尽身前无限怀。</p><a id="more"></a><h2 id="再见，2017！-你好，2018！"><a href="#再见，2017！-你好，2018！" class="headerlink" title="再见，2017！ 你好，2018！"></a><strong>再见，2017！ 你好，2018！</strong></h2><p>   在刚刚过去的2017年里，回过头来，发现还是没有读多少本书，但是，依然还是有值得高兴的事情。在社交方面，又有了新的体会；在学习上，也有了不同的积累的方法；在心境上，对自我的认知更加深刻……</p><p>   见证了学长们的离开，与看到后辈们的涌入，不禁想到学校毕竟只是一个说长不长，说短不短的“世外之地”，在这里见证了学生间的荣誉，还有彼此的相聚，更有彼此间的分离。突然才想起了杜甫的那句“天地一行间，忽如远行客。”，生活的节奏越来越快，让人开始渐渐模糊今天和昨日，开始忘记了初心，我们也在人生的这趟旅途越走越远，只是，在前行的道路上，我们要做的就是活在当下，随时做好与别人分别的准备那样的活着，兴许这样才是最好的告别方式，就像《少年派的奇幻漂流》里，男主人公最后与那只老虎分别的场景一样，我们不确定那只老虎是不是他本人的另一个自我，但是我能从中体会到的就是，与那只老虎从斗争到最后的相处，再到分别。这些不仅仅是自我的相处，也是与人相处的模式，我也再次体会到了，有些时候不好好的和对方说再见，以后是没有机会再说这样的心情。所以，人生需要的就是杜甫那样的心态，保持平衡的心态。只有这样才不会失去本心。</p><p>   同时，在去年，计算机方面也有好好的玩了一把Python爬虫，虽然我知道这个玩意我只是开始入门，但是我想今年继续这么开始下去；同时，心境上，更加注重对当下的态度，就是始终持着在当下保持平衡的心态，凡事不急，一步一步慢慢开始！人生还长，同时就通过这个新搭建的博客来开始自我的探索，技术、生活的分享之旅！希望对自己是一个新的开始，最后也要明白，贵在坚持！!</p><p>   <img src="https://i.imgur.com/2y3a7E9.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于OSPF的简单配置</title>
      <link href="/2017/07/06/2017-07-06%E7%AE%80%E5%8D%95%E7%9A%84ospf%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/07/06/2017-07-06%E7%AE%80%E5%8D%95%E7%9A%84ospf%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>了解什么是OSPF~</p><a id="more"></a><h1 id="关于ospf的简单配置"><a href="#关于ospf的简单配置" class="headerlink" title="关于ospf的简单配置"></a>关于ospf的简单配置</h1><p>#</p><p> 网络拓扑图如下：<br><img src="http://i.imgur.com/c11YPOz.png" alt=""></p><h3 id="明白什么是ospf？"><a href="#明白什么是ospf？" class="headerlink" title="明白什么是ospf？"></a>明白什么是ospf？</h3><blockquote><p>ospf是Open Shortest Path First开放式最短路径优先的简称；</p></blockquote><blockquote><p>一种链路状态协议；</p></blockquote><h3 id="如何配置ospf？"><a href="#如何配置ospf？" class="headerlink" title="如何配置ospf？"></a>如何配置ospf？</h3><p><em>其实这个协议在这个网络拓扑图中起到的作用就是向其他的路由宣告其路由表，有这些网段，因此，最关键的就是打开路由的ospf功能；</em></p><h3 id="路由器配置如下"><a href="#路由器配置如下" class="headerlink" title="路由器配置如下"></a>路由器配置如下</h3><pre><code>en  //先进入用户模式config t //进入配置模式interface gi0/0    ///进入路由端口ip address xxx.xxx.xxx.xxx  mask  //配置端口ipno shutdown  //打开端口exit  //退出端口</code></pre><h3 id="ospf的配置："><a href="#ospf的配置：" class="headerlink" title="ospf的配置："></a>ospf的配置：</h3><blockquote><p>en </p></blockquote><blockquote><p>interface loopback 1  //给路由器设置一个路由Id</p></blockquote><blockquote><p>ip address xxx.xxx.xxx.xxx mask  //给路由器id的设置一个ip地址</p></blockquote><blockquote><p>exit  //退出端口</p></blockquote><blockquote><p>router ospf 进程号</p></blockquote><blockquote><p>network xxx.xxx.xxx.xxx [wildmask] area [number]</p></blockquote><blockquote><p>exit  //退出端口</p></blockquote>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> ospf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>交换机配置的打开方式</title>
      <link href="/2017/07/06/2017-07-06%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/07/06/2017-07-06%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>本次就简单谈谈交换机配置~</p><a id="more"></a><h1 id="关于交换机配置的打开方式"><a href="#关于交换机配置的打开方式" class="headerlink" title="关于交换机配置的打开方式"></a>关于交换机配置的打开方式</h1><p>#</p><p><strong>交换机</strong> 是一个处于第二层，数据链路层的网络设备，其目的就是用于控制第一层的hub(集线器)，避免产生冲突从而更好的为高层服务；</p><h3 id="交换机与路由器的区别"><a href="#交换机与路由器的区别" class="headerlink" title="交换机与路由器的区别"></a>交换机与路由器的区别</h3><blockquote><p>交换机不论在功能还是服务层都和路由器有很大的区别，功能上，交换机的作用就是在第二层进行数据的转发；</p></blockquote><h3 id="交换机与路由器配置上的区别"><a href="#交换机与路由器配置上的区别" class="headerlink" title="交换机与路由器配置上的区别"></a>交换机与路由器配置上的区别</h3><h5 id="交换机在IP上需要设置虚拟局域网也就是VLAN，然后配置VLAN的IP，然后让交换机的端口配置上VLAN，从而让交换机实现了端口的IP；而路由器的IP的是直接在端口上设置的。"><a href="#交换机在IP上需要设置虚拟局域网也就是VLAN，然后配置VLAN的IP，然后让交换机的端口配置上VLAN，从而让交换机实现了端口的IP；而路由器的IP的是直接在端口上设置的。" class="headerlink" title="交换机在IP上需要设置虚拟局域网也就是VLAN，然后配置VLAN的IP，然后让交换机的端口配置上VLAN，从而让交换机实现了端口的IP；而路由器的IP的是直接在端口上设置的。"></a>交换机在IP上需要设置虚拟局域网也就是VLAN，然后配置VLAN的IP，然后让交换机的端口配置上VLAN，从而让交换机实现了端口的IP；而路由器的IP的是直接在端口上设置的。</h5><h3 id="交换机的配置"><a href="#交换机的配置" class="headerlink" title="交换机的配置"></a>交换机的配置</h3><blockquote><p>en //进入用户模式</p></blockquote><blockquote><p>config t   //进入配置模式</p></blockquote><blockquote><p>vlan 10  //配置vlan</p></blockquote><blockquote><p>exit  //退出VLAN模式</p></blockquote><blockquote><p>interface fa0/0 </p></blockquote><blockquote><p>sw mode access    //设置为access端口模式</p></blockquote><blockquote><p>sw access vlan 10      //将vlan 10 的数据配置给交换机的端口</p></blockquote><blockquote><p>exit    //退出模式</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h6 id="以上就是交换机的配置，其实和路由器相比就是多了个设置vlan的模式，只要进入了这个模式其他的还是一模一样的。"><a href="#以上就是交换机的配置，其实和路由器相比就是多了个设置vlan的模式，只要进入了这个模式其他的还是一模一样的。" class="headerlink" title="以上就是交换机的配置，其实和路由器相比就是多了个设置vlan的模式，只要进入了这个模式其他的还是一模一样的。"></a>以上就是交换机的配置，其实和路由器相比就是多了个设置vlan的模式，只要进入了这个模式其他的还是一模一样的。</h6>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络基础（三）</title>
      <link href="/2017/04/03/2017-04-03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%B8%89/"/>
      <url>/2017/04/03/2017-04-03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%B8%89/</url>
      <content type="html"><![CDATA[<p>总结了OCI模型参考~</p><a id="more"></a><h1 id="计算机网络之三"><a href="#计算机网络之三" class="headerlink" title="计算机网络之三"></a><strong>计算机网络之三</strong></h1><hr><h2 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h2><p>   <strong>之前总结了OCI模型参考，对于数据的传输都有了个大致的了解了，但是对于计算机网络来说，我们还要明白，在网络真正实现的是TCP/IP参考模型。那么TCP/IP协议族到底有什么协议呢？</strong></p><p>  通过下图就可以了解到TCP/IP有的协议：<img src="http://i.imgur.com/NrFf3Cs.png" alt=""></p><p>   这里分别介绍一下TCP/IP协议族含有的主要协议；<br>   首先从四层传输层TCP和UDP介绍；</p><blockquote><p>TCP协议：一个以建立连接为传输的协议，通过三次握手建立连接，通过四次握手结束连接，具有稳定，传输安全系数高（相对UDP而言）；下图所示：<img src="http://i.imgur.com/oETi9ci.png" alt=""></p></blockquote><blockquote><p>UDP协议：一个不以建立连接为传输的协议，主要用于实时传输中，具有占用协议资源少的优点；如下图所示：<img src="http://i.imgur.com/QiSKJvD.png" alt=""><br>因为这里是关于网络传输所以我们只两个参数，seq:收发端的序列号识别，用于告知接收方和发送方的端口号，同时识别用的；<br>ack：用于确认收到的数据报文而设立的，同时在TCP协议还有要告知进行下一次通信的信息；<br>另一个重要的就是三层的IP协议：用于网络层的传输；如图：<img src="http://i.imgur.com/t0bFRnR.png" alt=""></p></blockquote><p>   介绍完了这些重要的协议，暂时就不描述报文里的各个参数了。继续介绍我们的TCP/IP协议族；</p><p>   自上而下的介绍，从传输层的连接涉及到的协议来介绍：</p><blockquote><p>TELNET:是Internet远程登陆服务的标准协议和主要方式；</p></blockquote><blockquote><p>FTP:是File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于Internet上的控制文件的双向传输；</p></blockquote><blockquote><p>SMTP:SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式；</p></blockquote><blockquote><p>另一个就从UDP无连接涉及到的协议来介绍：<br>DNS：（Domain Name System，域名系统），就是一个方便人们记住IP号的协议，比如我们记住的是<a href="http://www.baidu.com而不是那一串[14.215.177.38]IP地址；" target="_blank" rel="noopener">www.baidu.com而不是那一串[14.215.177.38]IP地址；</a></p></blockquote><blockquote><p>TFTP:（Trivial File Transfer Protocol,简单文件传输协议）是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务;</p></blockquote><p>   好了上面介绍的是传输层的相关协议，现在介绍的是网络层协议了，其实网络层的协议主要的就三个；<br>​    </p><blockquote><p>ICMP:（Internet Control Message Protocol）Internet控制报文协议,作用就是控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息;<br>ARP:ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议;<br>RARP:和上面那个协议相反，就是反地址解析协议，在现在的工程不怎么常用；</p></blockquote><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><blockquote><p>TCP/IP协议族涉及到的协议有这些，通过图文来反复记忆这些；</p></blockquote>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络基础（二）</title>
      <link href="/2017/03/29/2017-03-29-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8C/"/>
      <url>/2017/03/29/2017-03-29-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>距离上次我谈到的计算机网络基础之一，貌似也过了好久，对于那些存在于脑子里好多的东西的我们都需要一个整理。以免以后的自己忘记了~</p><a id="more"></a><h1 id="计算机网络之二"><a href="#计算机网络之二" class="headerlink" title="计算机网络之二"></a>计算机网络之二</h1><hr><p>   距离上次我谈到的计算机网络基础之一，貌似也过了好久，对于那些存在于脑子里好多的东西的我们都需要一个整理。当然废话少说，我们直接上干货了。<br>   这次带来的东西就是关于计算机网络分层的东西。首先要明白一个问题，什么是OSI？？？<br>   <strong><em>OSI</em></strong>这个东东就是一个参考模型。总之关于它的来历背景都可以去问度娘，总之这个的作用就是用来解决网络之间的兼容性问题。那么具体的OSI的模型具体又是什么呢？<br>   <strong><em>OSI模型</em></strong>  就是如下这个东东。<img src="http://i.imgur.com/iy0f6eD.png" alt=""><br>   左边的就是OSI参考模型，它是一个七层的模型，分别为物理层，数据链路层，网络层，传输层，会话层，表示层，应用层。其中每层都有相对应的协议，正如右边的的用到的协议框架中提到的那些HTTP,TELNET等等。现在我们来分别介绍一下各个层次的含义以及，这些对应的层次的都是怎样将一个数据传输出来的。</p><p><strong>物理层</strong>  这层是面向底层传输的二进制数据，主要是面向物理硬件的传输介质比如光纤，网线等等；</p><p><strong>数据链路层</strong> 这层面向的机体是交换机而言的，最主要的是识别交换机的MAC地址用；</p><p><strong>网络层</strong>  这层面向的是主要硬件有路由器，分别起到路由地址的转发的作用；</p><p><strong>传输层</strong>   这层的作用是收发数据用的，主要用到的两个协议TCP和UDP协议；</p><p><strong>会话层</strong>   这层提供一种有效的方法，其功能是按照在应用进程之间的原则，进行数据收发，例如：选取全双工还是半双工通信；</p><p><strong>表示层</strong>   这层主要是解决用户的信息的语法问题，起到对信息格式和编码起转换作用，例如一些base64以及ASCII码转换成为EBCDIC等；</p><p><strong>应用层</strong>   这层是OSI模型中最高层，直接面向用户以满足不同需求的，利用网路资源，唯一向应用程序直接提供服务的层；</p><p>当然这个OSI模型只是为了更好的服务于网络的各个协议而设计的，它具有的优点我就不一一介绍了。同时，在这个七层的模型，我们只重点讲解网络层和数据链路层，只在这两个层面来讨论。那么问题来了，那么多层的协议对于懒惰的程序猿而言，要实现是不是有点麻烦啊？事实回答：是的。</p><p>因此程序猿们想了一个办法，其中就在各位大佬的努力下，与OSI模型对应的另一个模型就诞生了，这个是一个现实网络真正应用的模型。现在我想会不会有些晕啊。没关系我们在梳理梳理这些关系。OSI七层模型，是为了更好的管理网络协议而提出的参考模型，在网络中没有具体的应用，而与此对应的TCP/IP模型是程序猿们为了更好的实现而自己构建的模型，在网络中具体运用的模型。具有现实意义。<strong>注意，注意，注意了！</strong>这个TCP/IP模型是针对程序猿而言的。所以它简化了好多的层次。具体参考上图。</p><p>那么明白了网络的各个层次，我们还是得从OSI模型来讲，讲什么呢？？</p><p>讲讲数据如何是从一台PC机收发数据到另一台PC机的故事。</p><p><img src="http://i.imgur.com/9Q6EC41.png" alt=""></p><p>PC A 到PC B 的过程就是一个经历了层层封装的过程，首先，PC A 发了一个信息‘A君’。A君从应用层出发，然后经过传输层，这时候，A君穿上了一件外套，也就是被封装了TCP的报头，接着在向下移动，经过网络层的时候，IP大大又给他戴上了IP的报头，这时的A君中除了自己还穿上了TCP给的外套和IP的帽子，紧接着A君再向下的数据链路层，数据链路层给他穿上了裤子，这裤子包含了LLC报头和FCS的报尾部分，在数据链路层，还会给A君穿上鞋子，这鞋子带有一层MAC头和FCS的报尾，最后经过物理层的时候A君就转换成了二进制数据，这时候完成了一个自上而下的数据封装过程，最后A君就完成了一次从PC A到物理层的行走。同时，想要到达PC B，方式就和PC A 一样只是不是自上而下了，而是自下而上，最后到达了PC B。这就是A君在OSI模型里完整走的流程。</p><p>  那么明白了这个模型，我们还得掌握一个TCP/IP的模型，这个模型才是我们要真正掌握的东东。</p><p><img src="http://i.imgur.com/A48jccy.png" alt=""></p><p>  强大的程序猿们在原来的OSI模型上又建立了一个真正的网络模型，且现在的网络传输格局都遵循这个模型里的各个协议，之后我会更详细的一一解释关于TCP/IP的协议族，当然了，关于计算机网络基础，我们主要研究的范围就是TCP/IP，当然其他也有研究的价值，只是那不在计算机网络范畴。</p><p><strong>小思考&amp;小结</strong>  </p><p>  这次这篇文章我们介绍了主要有三个：</p><blockquote><p> 1、OSI模型这个东东；回想一下OSI模型这个东西存在的目的？？</p></blockquote><blockquote><p> 2、OSI七层模型含有哪七层？？？各个层次的作用是什么？？</p></blockquote><blockquote><p> 3、 关于OSI模型是如何将数据封装然后传输的？？？</p></blockquote><blockquote><p> 4、为什么会有TCP/IP模型？？？和OSI模型有什么区别？？？</p></blockquote>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> OSI模型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络的路牌 路由器</title>
      <link href="/2016/02/03/2018-01-07-web-for-internet/"/>
      <url>/2016/02/03/2018-01-07-web-for-internet/</url>
      <content type="html"><![CDATA[<p>网络之间的ip如何实现之间的互联，如何快速到达目的地址，这中间路由器可谓是一个关键的的工具…………</p><a id="more"></a><h1 id="网络间互联的工具———路由器"><a href="#网络间互联的工具———路由器" class="headerlink" title="网络间互联的工具———路由器"></a><strong><em>网络间互联的工具———路由器</em></strong></h1><h2 id="什么是路由器？"><a href="#什么是路由器？" class="headerlink" title="什么是路由器？"></a>什么是路由器？</h2><h3 id="路由器就是连接网络的计算机设备。"><a href="#路由器就是连接网络的计算机设备。" class="headerlink" title="路由器就是连接网络的计算机设备。"></a>路由器就是连接网络的计算机设备。</h3><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>1.使网络中的设备相互连接，数据转发；</p></blockquote><blockquote><p>2.路由（寻径）路由表的建立、刷新；</p></blockquote><blockquote><p>3.交换：在不同网路之间转发IP分组数据；</p></blockquote><blockquote><p>4.隔离广播域，指定访问规则ALC；</p></blockquote><blockquote><p>5.异种网络互连（不同的链路层互连）；</p></blockquote><blockquote><p>6.工作在第三层，就是网络层，依据IP来转发数据；</p></blockquote><h4 id="什么是路由表？"><a href="#什么是路由表？" class="headerlink" title="什么是路由表？"></a>什么是路由表？</h4><p>   逻辑上：路由表就是在进行数据转发时提供IP地址的一个表；<br>   物理上：存储于路由器上的RAM，关电擦除的一种存储方式；</p><h4 id="路由表构成"><a href="#路由表构成" class="headerlink" title="路由表构成"></a>路由表构成</h4><p>路由表是由哪些元素构成的呢？<br>目的IP<br>掩码<br>下一跳<br>优先级<br>自学习方式</p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学术总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写 Jekyll 博客的正确姿势</title>
      <link href="/2015/09/21/2015-09-21-tools-for-jekyll/"/>
      <url>/2015/09/21/2015-09-21-tools-for-jekyll/</url>
      <content type="html"><![CDATA[<p>用 Jekyll 写博客有个麻烦的地方，就是你可能需要把博客<code>git pull</code>下来，修改完成<code>commit</code>后，再<code>push</code>上 GitHub；或者使用 GitHub 的在线编辑器编辑，无论哪种都非常麻烦。幸好找到了几个第三方的写博客和图床工具。</p><a id="more"></a><h2 id="写博客工具"><a href="#写博客工具" class="headerlink" title="写博客工具"></a>写博客工具</h2><p>有两个工具，分别是<code>jekyller</code>、<code>prose.io</code>。</p><h3 id="Jekyller"><a href="#Jekyller" class="headerlink" title="Jekyller"></a>Jekyller</h3><p><code>jekyller</code>是 Chrome 上的应用，它可以管理你的所有博客，实时<code>markdown</code>渲染。</p><p><img src="http://simpleyyt.qiniudn.com/15-9-21/21644919.jpg" alt="Jekyller"></p><p>但是它的 UI 比较难看，而且对<code>markdown</code>的支持也不是很好。</p><h3 id="Prose-io"><a href="#Prose-io" class="headerlink" title="Prose.io"></a>Prose.io</h3><p>非常好的一个工具，它的编辑器非常强大，可以上传图片、文件等，可以在<code>_config.yml</code>文件中配置<code>prose.io</code>。</p><p><img src="http://simpleyyt.qiniudn.com/15-9-21/82332870.jpg" alt="Prose.io"></p><p>缺点就是不支持实时预览，而且也不会自己保存。</p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>图床的话强烈推荐<strong>七牛</strong>，其缺点就是操作不人性化，但是 chrome 上面有好多相关的插件解决这个问题，比如<a href="http://yotuku.cn/" target="_blank" rel="noopener">极简图床</a> 便是基于七牛的图床网站。</p><h2 id="图表工具"><a href="#图表工具" class="headerlink" title="图表工具"></a>图表工具</h2><p>写博客难免会需要用画一些图表，有两类图表，一类是 <a href="http://yuml.me/diagram/scruffy/class/draw" target="_blank" rel="noopener">yUML</a>、<a href="http://plantuml.com/" target="_blank" rel="noopener">plantUML</a>, 另一类是 <a href="http://draw.io" target="_blank" rel="noopener">draw.io</a>。</p><h3 id="yUML-和-plantUML"><a href="#yUML-和-plantUML" class="headerlink" title="yUML 和 plantUML"></a>yUML 和 plantUML</h3><p>这类图表只需要按格式输入代码，便会自动产生图表，生成图片链接，省去了上传到图床，后期也可以修改。</p><p><img src="http://simpleyyt.qiniudn.com/15-9-21/46889912.jpg" alt="yUML"></p><p><img src="http://simpleyyt.qiniudn.com/15-9-21/34152859.jpg" alt="plantUML"></p><h3 id="draw-io"><a href="#draw-io" class="headerlink" title="draw.io"></a>draw.io</h3><p>这个是在线手动绘图的工具，chrome 应用商店里面也下载得到离线应用，绘图完成之后需要上传到图床中。</p><p><img src="http://simpleyyt.qiniudn.com/15-9-21/68984484.jpg" alt="draw.io"></p><p>（声明：本文摘自suanxiaoyu.github.io by suanxiaoyu）</p>]]></content>
      
      <categories>
          
          <category> jekyll </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 学习资料 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
